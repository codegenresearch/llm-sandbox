import io\nimport os\nimport docker\nimport tarfile\nfrom typing import List, Optional, Union\n\nfrom docker.models.images import Image\nfrom docker.models.containers import Container\nfrom llm_sandbox.utils import (\n    image_exists,\n    get_libraries_installation_command,\n    get_code_file_extension,\n    get_code_execution_command,\n)\nfrom llm_sandbox.const import (\n    SupportedLanguage,\n    SupportedLanguageValues,\n    DefaultImage,\n    NotSupportedLibraryInstallation,\n)\n\n\nclass SandboxSession:\n    def __init__(\n        self,\n        image: Optional[str] = None,\n        dockerfile: Optional[str] = None,\n        lang: str = SupportedLanguage.PYTHON,\n        keep_template: bool = False,\n        verbose: bool = True,\n    ) -> None:\n        """\n        Create a new sandbox session\n        :param image: Docker image to use\n        :param dockerfile: Path to the Dockerfile, if image is not provided\n        :param lang: Language of the code\n        :param keep_template: if True, the image and container will not be removed after the session ends\n        :param verbose: if True, print messages\n        """\n        if image and dockerfile:\n            raise ValueError(\