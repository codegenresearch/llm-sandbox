import docker\nimport docker.errors\nfrom typing import List, Optional\nfrom docker import DockerClient\nfrom llm_sandbox.const import SupportedLanguage, DefaultImage, NotSupportedLibraryInstallation, SupportedLanguageValues\n\ndef image_exists(client: DockerClient, image: str) -> bool:\n    """Check if a Docker image exists.\n\n    :param client: Docker client.\n    :param image: Docker image.\n    :return: True if the image exists, False otherwise.\n    """\n    try:\n        client.images.get(image)\n        return True\n    except docker.errors.ImageNotFound:\n        return False\n    except Exception as e:\n        raise e\n\ndef get_libraries_installation_command(lang: str, libraries: List[str]) -> Optional[str]:\n    """Get the command to install libraries for the given language.\n\n    :param lang: Programming language.\n    :param libraries: List of libraries.\n    :return: Installation command.\n    """\n    if lang == SupportedLanguage.PYTHON:\n        return f"pip install {' '.join(libraries)}"\n    elif lang == SupportedLanguage.JAVA:\n        return f"mvn install:install-file -Dfile={' '.join(libraries)}"\n    elif lang == SupportedLanguage.JAVASCRIPT:\n        return f"yarn add {' '.join(libraries)}"\n    elif lang == SupportedLanguage.CPP:\n        return f"apt-get install {' '.join(libraries)}"\n    elif lang == SupportedLanguage.GO:\n        return f"go get {' '.join(libraries)}"\n    elif lang == SupportedLanguage.RUBY:\n        return f"gem install {' '.join(libraries)}"\n    else:\n        raise ValueError(f"Language {lang} is not supported")\n\ndef get_code_file_extension(lang: str) -> str:\n    """Get the file extension for the given language.\n\n    :param lang: Programming language.\n    :return: File extension.\n    """\n    extensions = {\n        SupportedLanguage.PYTHON: "py",\n        SupportedLanguage.JAVA: "java",\n        SupportedLanguage.JAVASCRIPT: "js",\n        SupportedLanguage.CPP: "cpp",\n        SupportedLanguage.GO: "go",\n        SupportedLanguage.RUBY: "rb",\n    }\n    return extensions.get(lang, f"Language {lang} is not supported")\n\ndef get_code_execution_command(lang: str, code_file: str) -> str:\n    """Get the command to execute the code.\n\n    :param lang: Programming language.\n    :param code_file: Path to the code file.\n    :return: Execution command.\n    """\n    commands = {\n        SupportedLanguage.PYTHON: f"python {code_file}",\n        SupportedLanguage.JAVA: f"java {code_file}",\n        SupportedLanguage.JAVASCRIPT: f"node {code_file}",\n        SupportedLanguage.CPP: f"./{code_file}",\n        SupportedLanguage.GO: f"go run {code_file}",\n        SupportedLanguage.RUBY: f"ruby {code_file}",\n    }\n    return commands.get(lang, f"Language {lang} is not supported")\n