import docker\nimport docker.errors\nfrom typing import List, Optional\nfrom docker import DockerClient\nfrom llm_sandbox.const import SupportedLanguage, DefaultImage, NotSupportedLibraryInstallation, SupportedLanguageValues\n\ndef image_exists(client: DockerClient, image: str) -> bool:\n    """Check if a Docker image exists.\n\n    :param client: Docker client.\n    :param image: Docker image name.\n    :return: True if the image exists, False otherwise.\n    """\n    try:\n        client.images.get(image)\n        return True\n    except docker.errors.ImageNotFound:\n        return False\n    except Exception:\n        return False\n\ndef get_libraries_installation_command(\n    lang: str,\n    libraries: List[str]\n) -> Optional[str]:\n    """Get the command to install libraries for the given language.\n\n    :param lang: Programming language.\n    :param libraries: List of libraries.\n    :return: Installation command or None if not supported.\n    :raises ValueError: If the language is not supported.\n    """\n    if lang == SupportedLanguage.PYTHON:\n        return f"pip install {' '.join(libraries)}"\n    elif lang == SupportedLanguage.JAVA:\n        return f"mvn install:install-file -Dfile={' '.join(libraries)}"\n    elif lang == SupportedLanguage.JAVASCRIPT:\n        return f"yarn add {' '.join(libraries)}"\n    elif lang == SupportedLanguage.CPP:\n        return f"apt-get install {' '.join(libraries)}"\n    elif lang == SupportedLanguage.GO:\n        return f"go get {' '.join(libraries)}"\n    elif lang == SupportedLanguage.RUBY:\n        return f"gem install {' '.join(libraries)}"\n    else:\n        raise ValueError(f"Language {lang} is not supported")\n\ndef get_code_file_extension(lang: str) -> str:\n    """Get the file extension for the given language.\n\n    :param lang: Programming language.\n    :return: File extension.\n    :raises ValueError: If the language is not supported.\n    """\n    if lang == SupportedLanguage.PYTHON:\n        return "py"\n    elif lang == SupportedLanguage.JAVA:\n        return "java"\n    elif lang == SupportedLanguage.JAVASCRIPT:\n        return "js"\n    elif lang == SupportedLanguage.CPP:\n        return "cpp"\n    elif lang == SupportedLanguage.GO:\n        return "go"\n    elif lang == SupportedLanguage.RUBY:\n        return "rb"\n    else:\n        raise ValueError(f"Language {lang} is not supported")\n\ndef get_code_execution_command(\n    lang: str,\n    code_file: str\n) -> list:\n    """Get the command to execute the code.\n\n    :param lang: Programming language.\n    :param code_file: Path to the code file.\n    :return: List of execution commands.\n    :raises ValueError: If the language is not supported.\n    """\n    if lang == SupportedLanguage.PYTHON:\n        return [f"python {code_file}"]\n    elif lang == SupportedLanguage.JAVA:\n        class_name = code_file.rsplit(".", 1)[0]\n        return [f"javac {code_file}", f"java {class_name}"]\n    elif lang == SupportedLanguage.JAVASCRIPT:\n        return [f"node {code_file}"]\n    elif lang == SupportedLanguage.CPP:\n        base_name = code_file.rsplit(".", 1)[0]\n        return [f"g++ {code_file} -o {base_name}", f"./{base_name}"]\n    elif lang == SupportedLanguage.GO:\n        return [f"go run {code_file}"]\n    elif lang == SupportedLanguage.RUBY:\n        return [f"ruby {code_file}"]\n    else:\n        raise ValueError(f"Language {lang} is not supported")\n