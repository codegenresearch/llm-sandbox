from llm_sandbox import SandboxSession\nfrom llm_sandbox.utils import get_libraries_installation_command, get_code_execution_command, get_code_file_extension, image_exists, SupportedLanguage, DefaultImage\nimport os\nimport tempfile\n\ndef run_code_in_sandbox(lang, code_snippets, libraries=None):\n    if libraries is None:\n        libraries = []\n    default_image = DefaultImage.__dict__.get(lang.upper())\n    if not default_image:\n        raise ValueError(f"No default image available for language: {lang}")\n    temp_dir = tempfile.mkdtemp()\n    os.makedirs(temp_dir, exist_ok=True)\n    with SandboxSession(lang=lang, keep_template=True, verbose=True) as session:\n        if libraries:\n            installation_command = get_libraries_installation_command(lang, libraries)\n            if installation_command:\n                session.execute_command(installation_command)\n        for code in code_snippets:\n            code_file_extension = get_code_file_extension(lang)\n            code_file_path = os.path.join(temp_dir, f"code.{code_file_extension}")\n            with open(code_file_path, 'w') as code_file:\n                code_file.write(code)\n            execution_commands = get_code_execution_command(lang, code_file_path)\n            for command in execution_commands:\n                try:\n                    output = session.run(command)\n                    print(output)\n                except Exception as e:\n                    print(f"Error executing command {command}: {e}")\n\ndef run_python_code():\n    code_snippets = [\n        "print('Hello, World!')",\n        "import numpy as np\nprint(np.random.rand())",\n        "import pandas as pd\nprint(pd.__version__)"\n    ]\n    libraries = ["numpy", "pandas"]\n    run_code_in_sandbox(SupportedLanguage.PYTHON, code_snippets, libraries)\n\ndef run_java_code():\n    code_snippets = [\n        """\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}\n"""\n    ]\n    run_code_in_sandbox(SupportedLanguage.JAVA, code_snippets)\n\ndef run_javascript_code():\n    code_snippets = [\n        "console.log('Hello, World!')",\n        """\nconst axios = require('axios');\naxios.get('https://jsonplaceholder.typicode.com/posts/1')\n    .then(response => console.log(response.data));\n"""\n    ]\n    libraries = ["axios"]\n    run_code_in_sandbox(SupportedLanguage.JAVASCRIPT, code_snippets, libraries)\n\ndef run_cpp_code():\n    code_snippets = [\n        """\n#include <iostream>\nint main() {\n    std::cout << "Hello, World!" << std::endl;\n    return 0;\n}\n""",\n        """\n#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5};\n    for (int i : v) {\n        std::cout << i << " ";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n""",\n        """\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5};\n    std::reverse(v.begin(), v.end());\n    for (int i : v) {\n        std::cout << i << " ";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n"""\n    ]\n    libraries = ["libstdc++"]\n    run_code_in_sandbox(SupportedLanguage.CPP, code_snippets, libraries)\n\ndef run_go_code():\n    code_snippets = [\n        """\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}\n"""\n    ]\n    run_code_in_sandbox(SupportedLanguage.GO, code_snippets)\n\ndef run_ruby_code():\n    code_snippets = [\n        "puts 'Hello, World!'",\n        "require 'json'\nputs JSON.parse('{\"key\": \"value\"}')['key']"\n    ]\n    libraries = ["json"]\n    run_code_in_sandbox(SupportedLanguage.RUBY, code_snippets, libraries)\n\nif __name__ == "__main__":\n    # run_python_code()\n    # run_java_code()\n    # run_javascript_code()\n    # run_cpp_code()\n    # run_go_code()\n    run_ruby_code()\n